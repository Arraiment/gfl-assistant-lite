<!DOCTYPE html>
<html>

<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <%- include('style'); -%>
</head>

<body>

  <div class="container">
    <div>
      <h2>Search for</h2>
    </div>
    <form autocomplete="off">
      <div class="autocomplete">
        <input id="dollName" type="text" name="dollName">
      </div>
      <input type="submit" value="Go">
    </form>
  </div>

  <%- include('script'); -%>

  <script>
    // Takes input field element and list of doll names as arguments
    function autocomplete(input, array) {
      var currentFocus;
      // Executes below every time text field value changes
      input.addEventListener("input", function (e) {
        // Assigns value of text field to temp var "val"
        let val = this.value;
        console.log("triggered");
        // Closes any existing autocompleteLists
        closeAllLists();
        // If text field is empty, exit function
        if (!val) {
          return false;
        }
        currentFocus = -1;
        // Create div that will contain all autocompleteItems
        let autocompleteList = document.createElement("div");
        autocompleteList.setAttribute("id", this.id + "autocomplete-list");
        autocompleteList.setAttribute("class", "autocomplete-items");
        // Appends div as child of autocomplete container div
        this.parentNode.appendChild(autocompleteList);

        array.forEach(name => {
          // If text matches start of name
          if (name.substr(0, val.length).toUpperCase() == val.toUpperCase()) {
            // Create div that contains autocompleteItem with matching name
            let autocompleteItem = document.createElement("div");
            // Make the matching letters bold
            autocompleteItem.innerHTML = "<strong>" + name.substr(0, val.length) + "</strong>";
            autocompleteItem.innerHTML += name.substr(val.length);
            // Create hidden input field to hold autocompleteItem value
            autocompleteItem.innerHTML += `<input type='hidden' value='${name}'>`;
            // When autocompleteItem is clicked
            autocompleteItem.addEventListener("click", function(e) {
              // Replace text field value with autocompleteItem value
              input.value = this.getElementsByTagName("input")[0].value;
              // Close autocompleteLists
              closeAllLists();
            });
            // Add autocompleteItem to autocompleteList
            autocompleteList.appendChild(autocompleteItem);
          }
        });
      });
      // Executes on keydown
      input.addEventListener("keydown", function (e) {
        let list = document.getElementById(this.id + "autocomplete-list");
        // If autocompleteList exists, get array of autocompleteItem elements
        if (list) list = list.getElementsByTagName("div");
        // Change focus based on key pressed
        if (e.key == 'ArrowDown') {
          currentFocus++;
          addActive(list);
        } else if (e.key == 'ArrowUp') {
          currentFocus--;
          addActive(list);
        } else if (e.key == 'Enter') {
          // Prevent form from submitting/refreshing
          e.preventDefault();
          if (currentFocus > -1) {
            // Simulate a click on the "active" item
            if (list) list[currentFocus].click();
          }
        }
      });

      function addActive(list) {
        // Return if list does not exist
        if (!list) return false;
        // Remove focus from all elements
        removeActive(list);
        // Change focus from last item to first item in list or vice versa
        if (currentFocus >= list.length) currentFocus = 0;
        if (currentFocus < 0) currentFocus = (list.length - 1);
        // Change style of focused autocompleteItem
        list[currentFocus].classList.add("autocomplete-active");
      }

      function removeActive(list) {
        for (const item of list) {
          item.classList.remove("autocomplete-active");
        }
      }
      // Close all autocomplete lists in the document
      function closeAllLists(element) {
        let lists = document.getElementsByClassName("autocomplete-items");
        for (const list of lists) {
          if (list != element && element != input) {
            list.parentNode.removeChild(list);
          }
        }
      }
      // Unfocus input when user clicks outside
      document.addEventListener("click", function (e) {
        closeAllLists(e.target);
      });
    }
    // Populates array of names with prop from server
    var names = <%- JSON.stringify(names) %>;
    console.log(names);
    autocomplete(document.getElementById("dollName"), names);
  </script>

</body>

</html>