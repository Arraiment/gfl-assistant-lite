<script>
  // Set up github link
  const linkGithub = document.getElementById("github");
  linkGithub.addEventListener("click", function (e) {
    window.open("https://github.com/Arraiment/gfl-assistant-lite");
  });

  // Set up modal exit
  const modalCancel = document.getElementById("modal-cancel");
  modalCancel.addEventListener("click", function (e) {
    resetModal();
  });

  // Resets modal
  function resetModal() {
    const content = document.getElementById("modal");
    content.style.display = "none";
    const linkButtons = document.getElementsByClassName("modal-button");
    while (linkButtons[0]) {
      linkButtons[0].parentNode.removeChild(linkButtons[0]);
    }
  }

  // Takes input field element and list of doll names as arguments
  function autocomplete(input, array) {
    var currentFocus;
    // Executes below every time text field value changes
    input.addEventListener("input", function (e) {
      // Assigns value of text field to temp var "val"
      let val = this.value;
      // Closes any existing lists
      clearList();
      // If text field is empty, exit function
      if (!val) {
        document.getElementById("cancel").style.visibility = "hidden";
        return false;
      }
      document.getElementById("cancel").style.visibility = "visible";
      currentFocus = -1;
      // Gets div that will contain all listItems
      let list = document.getElementById("autocomplete-list");
      array.forEach(name => {
        // If text matches start of name
        if (name.substr(0, val.length).toUpperCase() == val.toUpperCase()) {
          // Create div that contains listItem with matching name
          let listItem = document.createElement("div");
          // Make the matching letters bold
          listItem.innerHTML = "<strong>" + name.substr(0, val.length) + "</strong>";
          listItem.innerHTML += name.substr(val.length);
          // Create hidden input field to hold listItem value
          listItem.innerHTML += `<input type='hidden' value='${name}'>`;
          // When listItem is clicked
          listItem.addEventListener("click", function (e) {
            let itemValue = this.getElementsByTagName("input")[0].value;
            // Replace text field value with listItem value
            input.value = itemValue;
            // Clear list
            clearList();
            // Execute search
            searchUrl(itemValue);
          });
          // Add listItem to list
          list.appendChild(listItem);
        }
      });
    });
    // Executes on keydown
    input.addEventListener("keydown", function (e) {
      let list = document.getElementById("autocomplete-list");
      let listItems;
      // If list has items, get array of listItems
      if (list.firstChild) {
        listItems = list.getElementsByTagName("div");
      }
      // Change focus based on key pressed
      if (e.key == 'ArrowDown') {
        currentFocus++;
        addActive(listItems);
      } else if (e.key == 'ArrowUp') {
        currentFocus--;
        addActive(listItems);
      } else if (e.key == 'Enter') {
        // Prevent form from submitting/refreshing
        e.preventDefault();
        if (currentFocus > -1) {
          // Simulate a click on the "active" item
          listItems[currentFocus].click();
        }
      }
    });

    function addActive(list) {
      // Return if list of items does not exist
      if (!list) return false;
      // Remove focus from all elements
      removeActive(list);
      // Change focus from last item to first item in list or vice versa
      if (currentFocus >= list.length) currentFocus = 0;
      if (currentFocus < 0) currentFocus = (list.length - 1);
      // Change style of focused listItem
      list[currentFocus].classList.add("autocomplete-active");
    }

    function removeActive(list) {
      for (const item of list) {
        item.classList.remove("autocomplete-active");
      }
    }
    // Close all listItems in list
    function clearList() {
      const list = document.getElementById("autocomplete-list");
      while (list.firstChild) {
        list.removeChild(list.lastChild);
      }
    }
    // Cancel button functionality
    const cancel = document.getElementById("cancel");
    cancel.addEventListener("click", function (e) {
      clearList();
      input.value = "";
      document.getElementById("cancel").style.visibility = "hidden";
    });
    // Creates 3 links that should open new tabs to each gfl site
    function searchUrl(name) {
      const dialog = document.getElementById("modal");
      dialog.style.display = "flex";
      const title = document.getElementById("modal-title");
      title.innerText = name;
      const iop = {
        name: 'IOP Wiki',
        url: `https://iopwiki.com/index.php?search=${name}`
      };
      const gamepress = {
        name: 'GamePress Wiki',
        url: `https://gamepress.gg/girlsfrontline/search?query=${name}`
      };
      const atmg = {
        name: 'Angry Trap Midget\'s Guide',
        url: `https://gfl.matsuda.tips/search?q=${name}`
      };
      const gfla = {
        name: 'GFL Analysis',
        url: `https://www.gflanalysis.com/w/index.php?search=${name}`
      };
      const urlArray = [iop, gamepress, atmg, gfla];
      // Creates buttons for each object, adds to modal
      urlArray.forEach(obj => {
        const link = document.createElement("a");
        link.classList.add("modal-button")
        link.classList.add("modal-item")
        link.href = obj.url;
        link.target = "_blank";
        link.innerHTML = `
          <p>${obj.name}</p>
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
            <path d="M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z"/>
          </svg>
        `;
        const modal = document.getElementById("modal-content");
        modal.appendChild(link);
      });
    }
  }
  // Populates array of names with prop from server
  var names = `<%- JSON.stringify(names) %>`;
  names = JSON.parse(names);
  console.log(names);
  autocomplete(document.getElementById("search-bar"), names);
</script>